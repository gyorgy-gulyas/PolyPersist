#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------

import DataStore

namespace PolyPersist {
    
    # The IConnection interface represents the operations for managing and interacting with data stores.
    # It defines methods for checking the existence, retrieval, creation, and deletion of data stores.
    # These operations abstract away the underlying logic of interacting with the data store systems.
    interface IConnection {
        
        # Checks if a data store with the specified name exists.
        # This method returns a boolean indicating whether the data store is present in the system.
        # Arguments:
        #   storeName (string): The name of the data store to check.
        # Returns:
        #   boolean: True if the data store exists, false otherwise.
        async method IsDataStoreExists(storeName: string) => boolean

        # Retrieves a data store by its name.
        # This method returns the corresponding IDataStore object for the provided store name.
        # Arguments:
        #   storeName (string): The name of the data store to retrieve.
        # Returns:
        #   IDataStore: The data store object associated with the specified name.
        async method GetDataStoreByName(storeName: string) => IDataStore

        # Creates a new data store with the given name.
        # This method returns an IDataStore object for the newly created data store.
        # Arguments:
        #   storeName (string): The name of the new data store to create.
        # Returns:
        #   IDataStore: The created data store object.
        async method CreateDataStore(storeName: string) => IDataStore

        # Deletes a data store.
        # This method removes the provided data store from the system and returns a boolean indicating success.
        # Arguments:
        #   dataStore (IDataStore): The data store to delete.
        async method DropDataStore(dataStore: IDataStore)
    }
}
#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------

namespace PolyPersist {

    # IEntity interface represents a generic entity with an ID and etag.
    # The 'etag' is used for versioning or concurrency control in databases, often representing the entity's current version.
    # The 'id' is the unique identifier for the entity within the collection or data store.
    # These properties ensure that each entity has a unique identifier and version for data integrity.
    interface IEntity {
        
        # The 'etag' property represents the entity's version tag or a unique identifier used for concurrency control.
        # It is typically used to detect changes or updates in the entity, ensuring that the correct version of the entity is being modified.
        readonly property etag: string

        # The 'id' property represents the unique identifier for the entity.
        # This ID is typically used to reference and retrieve the entity from the data store.
        readonly property id: string
    }

    # IEntityPartitioned interface inherits from IEntity and adds a partition key for partitioned data stores.
    # The 'PartitionKey' is used to segment data into partitions, often for scaling or distributing data across different nodes.
    # In distributed databases, partitioning helps optimize performance and ensures efficient querying by reducing the scope of data scans.
    interface IEntityPartitioned inherits IEntity {

        # The 'PartitionKey' property represents the key used to partition data in distributed data stores.
        # This allows for more efficient storage and retrieval of entities, especially in large-scale, partitioned systems.
        readonly property PartitionKey: string
    }
}

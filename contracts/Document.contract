#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------
import Entity
import Store

namespace PolyPersist {

    interface IDocument inherits IEntity {
    }

    interface IDocumentStore inherits IStore {
        # Asynchronous method to check if a collection exists in the data store.
        # It returns a boolean value, indicating whether the collection with the specified name exists or not.
        # This can be used to verify the presence of a collection before performing operations like retrieval or deletion.
        #
        # @param collectionName - The name of the collection to check for existence.
        # @returns A boolean value indicating if the collection is present in the data store.
        async method IsCollectionExists(collectionName: string) => boolean

        # Asynchronous method to retrieve a collection by its name from the data store.
        # This method returns the collection as an ICollection of entities.
        # 
        # @param collectionName - The name of the collection to retrieve from the data store.
        # @returns An ICollection representing the collection with the specified name.
        async method GetCollectionByName<TDocument constraint IDocument instantiable>(collectionName: string) => IDocumentCollection<TDocument>

        # Asynchronous method to create a new collection in the data store.
        # This method creates a collection with the specified name and returns it as an ICollection of entities of files,
        #
        # @param collectionName - The name of the new collection to be created.
        # @returns The newly created collection, represented as an ICollection
        async method CreateCollection<TDocument constraint IDocument instantiable>(collectionName: string) => IDocumentCollection<TDocument>

        # Asynchronous method to drop (delete) an existing collection from the data store.
        # This method removes the specified collection, returning a boolean indicating whether the operation was successful.
        # The collection is represented as an ICollection of entities, files or vectors 
        #
        # @param collectionName - The name of the collection to be dropped from the data store.
        async method DropCollection(collectionName: string)
    }
    
    # The ICollection interface defines methods for CRUD operations on entities.
    # This interface is used for collections that store entities.
    interface IDocumentCollection<TDocument constraint IDocument instantiable> {

        # Read-only property for parent Store.
        readonly property ParentStore: IStore

        # Read-only property representing the name of the collection.
        readonly property Name: string

        # Asynchronous method to insert an document into the collection.
        # The 'document' parameter is the document that will be inserted into the collection.
        async method Insert(document: TDocument)

        # Asynchronous method to update an existing document in the collection.
        # The 'document' parameter represents the document to be updated in the collection.
        async method Update(document: TDocument)

        # Asynchronous method to delete an document using its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the document, and 'partitionKey' is used for partitioning the data in distributed data stores.
        async method Delete(partitionKey:string, id: string)

        # Asynchronous method to find an document by its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the document, and 'partitionKey' is used to partition data.
        # Returns the document if found, or null if not found.
        async method Find(partitionKey:string, id: string) => TDocument

        # Getting the query interface for collection
        # the return value is generic, so the implementation can define what are the real types
        # In dotnet is can be IQueryable, in java it can be Java Streams, or Querydsl etc...
        method Query<T constraint TDocument instantiable>() => any

        # getting the underlying implementation
        # please use this method carefully, because the returned value is different in every implementation
        method GetUnderlyingImplementation() => any
    }
}

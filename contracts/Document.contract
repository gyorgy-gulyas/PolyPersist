#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------

import Entity

namespace PolyPersist {

    interface IDocument inherits IEntity {
    }

    interface IDocumentStore {
        # Asynchronous method to check if a collection exists in the data store.
        # It returns a boolean value, indicating whether the collection with the specified name exists or not.
        # This can be used to verify the presence of a collection before performing operations like retrieval or deletion.
        #
        # @param collectionName - The name of the collection to check for existence.
        # @returns A boolean value indicating if the collection is present in the data store.
        async method IsCollectionExists(collectionName: string) => boolean

        # Asynchronous method to retrieve a collection by its name from the data store.
        # This method returns the collection as an ICollection of entities or files or vectors.
        # 
        # @param collectionName - The name of the collection to retrieve from the data store.
        # @returns An ICollection representing the collection with the specified name.
        async method GetCollectionByName<TEntity constraint IEntity instantiable>(collectionName: string) => IDocumentCollection<TEntity>

        # Asynchronous method to create a new collection in the data store.
        # This method creates a collection with the specified name and returns it as an ICollection of entities of files,
        #
        # @param collectionName - The name of the new collection to be created.
        # @returns The newly created collection, represented as an ICollection
        async method CreateCollection<TEntity constraint IEntity instantiable>(collectionName: string) => IDocumentCollection<TEntity>

        # Asynchronous method to drop (delete) an existing collection from the data store.
        # This method removes the specified collection, returning a boolean indicating whether the operation was successful.
        # The collection is represented as an ICollection of entities, files or vectors 
        #
        # @param collectionName - The name of the collection to be dropped from the data store.
        async method DropCollection(collectionName: string)
    }
    
    # The ICollection interface defines methods for CRUD operations on entities.
    # This interface is used for collections that store entities.
    interface IDocumentCollection<TDocument constraint IDocument instantiable> {

        # Read-only property representing the name of the collection.
        readonly property Name: string

        # Asynchronous method to insert an entity into the collection.
        # The 'entity' parameter is the entity that will be inserted into the collection.
        async method Insert(entity: TDocument)

        # Asynchronous method to update an existing entity in the collection.
        # The 'entity' parameter represents the entity to be updated in the collection.
        async method Update(entity: TDocument)

        # Asynchronous method to delete an entity using its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the entity, and 'partitionKey' is used for partitioning the data in distributed data stores.
        async method Delete(partitionKey:string, id: string)

        # Asynchronous method to find an entity by its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the entity, and 'partitionKey' is used to partition data.
        # Returns the entity if found, or null if not found.
        async method Find(partitionKey:string, id: string) => TDocument

        # Asynchronous method to query the entiies
        # the return value generic, so the implementation can define what are the real types
        # In dotnet is can be IQueryable, in java it can be Java Streams, or Querydsl etc...
        method Query<TQuery>() => TQuery

        # getting the underlying implementation
        # please use this method carefully, because the returned value is different in every implementation
        method GetUnderlyingImplementation() => any
    }
   
}

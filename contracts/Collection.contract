#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------

namespace PolyPersist {

    # The IEntityCollection interface extends ICollection and adds methods for CRUD operations on entities.
    # This interface is used for collections that store entities.
    interface ICollection<TEntity constraint IEntity instantiable> {

        # Read-only property representing the name of the collection.
        readonly property Name: string;

        # Asynchronous method to insert an entity into the collection.
        # The 'entity' parameter is the entity that will be inserted into the collection.
        async method Insert(entity: TEntity)

        # Asynchronous method to update an existing entity in the collection.
        # The 'entity' parameter represents the entity to be updated in the collection.
        async method Update(entity: TEntity)

        # Asynchronous method to delete an entity from the collection.
        # The 'entity' parameter represents the entity that will be deleted.
        async method Delete(entity: TEntity)

        # Asynchronous method to delete an entity using its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the entity, and 'partitionKey' is used for partitioning the data in distributed data stores.
        async method Delete(id: string, partitionKey:string)

        # Asynchronous method to find an entity by its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the entity, and 'partitionKey' is used to partition data.
        # Returns the entity if found, or null if not found.
        async method Find(id: string, partitionKey:string) => TEntity
    }
}

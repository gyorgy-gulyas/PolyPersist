#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------
import Entity
import Store

namespace PolyPersist {

    interface IRow inherits IEntity {
    }

    # IColumnStore defines a column-oriented logical store interface.
    # It extends the general-purpose IStore interface, and adds support for
    # table-level operations typically used in column store systems.
    # Each table stores typed documents implementing IRow.
    # This interface provides a unified way to access column store databases
    # like Cassandra, Amazon Redshift, and Google BigQuery.
    interface IColumnStore inherits IStore {

        # Asynchronous method to check if a columntable exists in the data store.
        # It returns a boolean value, indicating whether the columntable with the specified name exists or not.
        # This can be used to verify the presence of a columntable before performing operations like retrieval or deletion.
        #
        # @param tableName - The name of the columntable to check for existence.
        # @returns A boolean value indicating if the columntable is present in the data store.
        async method IsTableExists(tableName: string) => boolean

        # Asynchronous method to retrieve a columntable by its name from the data store.
        # This method returns the columntable as an IColumnTable of entities.
        # 
        # @param tableName - The name of the columntable to retrieve from the data store.
        # @returns An IColumnTable representing the columntable with the specified name.
        async method GetTableByName<TRow constraint IRow instantiable>(tableName: string) => IColumnTable<TRow>

        # Asynchronous method to create a new columntable in the data store.
        # This method creates a columntable with the specified name and returns it as an IColumnTable of entities of files,
        #
        # @param tableName - The name of the new columntable to be created.
        # @returns The newly created columntable, represented as an IColumnTable
        async method CreateTable<TRow constraint IRow instantiable>(tableName: string) => IColumnTable<TRow>

        # Asynchronous method to drop (delete) an existing columntable from the data store.
        # This method removes the specified columntable, returning a boolean indicating whether the operation was successful.
        # The columntable is represented as an IColumntable of entities, files or vectors 
        #
        # @param tableName - The name of the columntable to be dropped from the data store.
        async method DropTable(tableName: string)
    }
    
    interface IColumnTable<TRow constraint IRow instantiable> {

        # Read-only property representing the name of the table.
        readonly property Name: string

        # Asynchronous method to insert an row into the columntable.
        # The 'row' parameter is the row that will be inserted into the table.
        async method Insert(row: TRow)

        # Asynchronous method to update an existing row in the columntable.
        # The 'row' parameter represents the row to be updated in the columntable.
        async method Update(row: TRow)

        # Asynchronous method to delete an row using its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the row, and 'partitionKey' is used for partitioning the data in distributed data stores.
        async method Delete(partitionKey:string, id: string)

        # Asynchronous method to find an row by its ID and PartitionKey.
        # The 'id' parameter is the unique identifier of the row, and 'partitionKey' is used to partition data.
        # Returns the row if found, or null if not found.
        async method Find(partitionKey:string, id: string) => TRow

        # Getting the query interface for table
        # the return value is generic, so the implementation can define what are the real types
        # In dotnet is can be IQueryable, in java it can be Java Streams, or Querydsl etc...
        method Query() => any

        # getting the underlying implementation
        # please use this method carefully, because the returned value is different in every implementation
        method GetUnderlyingImplementation() => any
    }
}

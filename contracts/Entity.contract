#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------


namespace PolyPersist {

    # IEntity interface represents a generic entity with an ID and etag.
    # The 'etag' is used for versioning or concurrency control in databases, often representing the entity's current version.
    # The 'id' is the unique identifier for the entity within the collection or data store.
    # These properties ensure that each entity has a unique identifier and version for data integrity.
    interface IEntity {
        
        # The 'id' property represents the unique identifier for the entity.
        # This ID is typically used to reference and retrieve the entity from the data store.
        property id: string

        # The 'etag' property represents the entity's version tag or a unique identifier used for concurrency control.
        # It is typically used to detect changes or updates in the entity, ensuring that the correct version of the entity is being modified.
        property etag: string

        # The 'PartitionKey' property represents the key used to partition data in distributed data stores.
        # This allows for more efficient storage and retrieval of entities, especially in large-scale, partitioned systems.
        #
        # Why PartitionKey is Important:
        # - It ensures that related data is grouped together in the same partition, reducing cross-partition queries.
        # - It improves the performance of read and write operations by minimizing data distribution overhead.
        # - It is crucial for ensuring scalability in cloud-based systems like Azure Cosmos DB or Amazon DynamoDB.
        #
        # Example Use Case:
        # In a multi-tenant application, the 'PartitionKey' could be the tenant ID, ensuring that all data
        # for a particular tenant is stored and queried efficiently.
        property PartitionKey: string

        # The 'LastUpdate' property represents the timestamp of the most recent modification to the entity.
        # This property is crucial for tracking changes and implementing update or audit mechanisms in the system.
        #
        # Why 'LastUpdate' is Important:
        # - It provides a reliable way to determine when an entity was last modified.
        # - Useful for synchronization processes, where only recently modified entities need to be updated.
        # - Enables efficient audit trails by recording the time of changes.
        #
        # Example Use Case:
        # In a content management system, the 'LastUpdate' could be used to display the "Last Modified" date
        # for articles, enabling users to see the freshness of the content.
        #
        # This property is marked as 'readonly' to ensure that the value is managed solely by the system
        # and not directly modified by users, maintaining data integrity.
        property LastUpdate: datetime
    }
}

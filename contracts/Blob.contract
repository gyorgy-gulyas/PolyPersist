#---------------------------------------------------------------------------------------------------
# These files are part of the PolyPersist project and are intended to be processed by the unicontract tool.
# After modifying these files, running unicontract is required to propagate the changes to the interface files in every supported programming language.
# unicontract will generate the necessary interface files in .NET, Java, and Python, reflecting the modifications made in this file.
#---------------------------------------------------------------------------------------------------
import Entity
import Collection

namespace PolyPersist {

    interface IBlob inherits IEntity {
        
        # The 'fileName' property represents the name of the file as it is stored in the data store.
        # This property can be used for human-readable identification or naming conventions.
        #
        # Example:
        # For a report named 'Monthly_Sales_Report.pdf', the 'fileName' would store the value 'Monthly_Sales_Report.pdf'.
        # Applications can use this property to display the file's name in the user interface.
        property fileName: string

        # The 'contentType' property represents the MIME type of the file.
        # This property is crucial for understanding the type of content stored in the file and determining
        # how it should be processed or displayed to the user.
        #
        # Example MIME Types:
        # - 'application/pdf' for PDF documents.
        # - 'image/png' for PNG images.
        # - 'text/plain' for plain text files.
        #
        # Applications can use this property to perform actions such as setting the appropriate headers
        # for file downloads or displaying a file preview in the correct format.
        property contentType: string
    }

    interface IBlobCollection<TBlob constraint IEntity instantiable> inherits ICollection<TBlob>
    {
        # The 'UploadContent' method is responsible for reading the file's binary or textual content
        # from the given 'source' stream and storing it in the data store.
        #
        # This method should handle the reading of the entire 'source' stream
        # and associate its contents with the underlying data record for this file.
        # Implementations may perform additional tasks such as validating file size or type before saving.
        async method UploadContent( entity:TBlob, source:stream )

        # The 'DownloadContentTo' method is responsible for retrieving the file's content
        # from the data store and writing it to the provided 'destination' stream.
        #
        # This method should read the entire stored file content and write it to 'destination'.
        # It is typically used whenever an application needs to serve or transfer the file to another medium,
        # such as returning it in an HTTP response for download, or saving it to local disk.
        async method DownloadContentTo( entity:TBlob, destination:stream )
    }
}

 
// <auto-generated>
//     This code was generated by unicontract
//     see more information: https://github.com/gyorgy-gulyas/UniContract
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace PolyPersist
{
	/// The IFileCollection interface defines methods for managing files within a collection.
	/// This interface is used for collections that store files.
	public interface IFileCollection<TFile>
		where TFile: IFile
	{
		/// Asynchronous method to upload a file to the collection.
		/// The 'fileName' is the name of the file, 'partitionKey' is used for partitioning, and 'content' is the file content in a stream.
		public Task Upload( string fileName, string partitionKey, Stream content );
		/// Asynchronous method to download a file from the collection.
		/// The 'fileName' is the name of the file.
		public Task<Stream> Download( string fileName, string partitionKey );
		/// Asynchronous method to delete a file from the collection.
		/// The 'file' parameter represents the file that will be deleted.
		public Task Delete( TFile file );
		/// Asynchronous method to check if a file exists in the collection.
		/// The 'fileName' is the name of the file, and 'partitionKey' is used for partitioning.
		/// Returns true if the file exists, otherwise false.
		public Task<bool> IsExists( string fileName, string partitionKey );
	}
}

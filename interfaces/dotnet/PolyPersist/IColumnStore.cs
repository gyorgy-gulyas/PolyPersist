 
// <auto-generated>
//     This code was generated by unicontract
//     see more information: https://github.com/gyorgy-gulyas/UniContract
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace PolyPersist
{
	/// IColumnStore defines a column-oriented logical store interface.
	/// It extends the general-purpose IStore interface, and adds support for
	/// table-level operations typically used in column store systems.
	/// Each table stores typed documents implementing IRow.
	/// This interface provides a unified way to access column store databases
	/// like Cassandra, Amazon Redshift, and Google BigQuery.
	public interface IColumnStore : IStore
	{
		/// Asynchronous method to check if a columntable exists in the data store.
		/// It returns a boolean value, indicating whether the columntable with the specified name exists or not.
		/// This can be used to verify the presence of a columntable before performing operations like retrieval or deletion.
		///
		/// @param tableName - The name of the columntable to check for existence.
		/// @returns A boolean value indicating if the columntable is present in the data store.
		public Task<bool> IsTableExists( string tableName );
		/// Asynchronous method to retrieve a columntable by its name from the data store.
		/// This method returns the columntable as an IColumnTable of entities.
		/// 
		/// @param tableName - The name of the columntable to retrieve from the data store.
		/// @returns An IColumnTable representing the columntable with the specified name.
		public Task<IColumnTable<TRow>> GetTableByName<TRow>( string tableName ) where TRow: IRow, new();
		/// Asynchronous method to create a new columntable in the data store.
		/// This method creates a columntable with the specified name and returns it as an IColumnTable of entities of files,
		///
		/// @param tableName - The name of the new columntable to be created.
		/// @returns The newly created columntable, represented as an IColumnTable
		public Task<IColumnTable<TRow>> CreateTable<TRow>( string tableName ) where TRow: IRow, new();
		/// Asynchronous method to drop (delete) an existing columntable from the data store.
		/// This method removes the specified columntable, returning a boolean indicating whether the operation was successful.
		/// The columntable is represented as an IColumntable of entities, files or vectors 
		///
		/// @param tableName - The name of the columntable to be dropped from the data store.
		public Task DropTable( string tableName );
	}
}

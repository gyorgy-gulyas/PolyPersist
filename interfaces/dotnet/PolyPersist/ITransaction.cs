 
// <auto-generated>
//     This code was generated by unicontract
//     see more information: https://github.com/gyorgy-gulyas/UniContract
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

using System;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace PolyPersist
{
	public interface ITransaction
	{

		/// Defines supported transactional operations.
		public enum Operations
		{
			Insert,
			Update,
			Delete,
		}

		/// Adds an existing document to the transaction for change tracking.
		public void AddOriginal<TDocument>( IDocumentCollection<TDocument> collection, TDocument document ) where TDocument: IDocument, new();
		/// Adds an existing row to the transaction for change tracking.
		public void AddOriginal<TRow>( IColumnTable<TRow> table, TRow row ) where TRow: IRow, new();
		/// Adds an existing blob to the transaction for change tracking, including its content snapshot.
		public Task AddOriginal<TBlob>( IBlobContainer<TBlob> container, TBlob blob ) where TBlob: IBlob, new();
		/// Inserts a new document and registers a rollback action to delete it if needed.
		public Task Insert<TDocument>( IDocumentCollection<TDocument> collection, TDocument document ) where TDocument: IDocument, new();
		/// Inserts a new row and registers a rollback action to delete it if needed.
		public Task Insert<TRow>( IColumnTable<TRow> table, TRow row ) where TRow: IRow, new();
		/// Uploads a new blob and registers a rollback action to delete it if needed.
		public Task Upload<TBlob>( IBlobContainer<TBlob> container, TBlob blob, Stream content ) where TBlob: IBlob, new();
		/// Updates an existing document and registers a rollback action to restore its original state if needed.
		public Task Update<TDocument>( IDocumentCollection<TDocument> collection, TDocument document ) where TDocument: IDocument, new();
		/// Updates an existing row and registers a rollback action to restore its original state if needed.
		public Task Update<TRow>( IColumnTable<TRow> table, TRow row ) where TRow: IRow, new();
		/// Updates the content of an existing blob and registers a rollback action to restore its original content if needed.
		public Task UpdateContent<TBlob>( IBlobContainer<TBlob> container, TBlob blob, Stream content ) where TBlob: IBlob, new();
		/// Updates the metadata of an existing blob and registers a rollback action to restore its original metadata if needed.
		public Task UpdateMetadata<TBlob>( IBlobContainer<TBlob> container, TBlob blob ) where TBlob: IBlob, new();
		/// Deletes an existing document and registers a rollback action to re-insert its original state if needed.
		public Task Delete<TDocument>( IDocumentCollection<TDocument> collection, TDocument document ) where TDocument: IDocument, new();
		/// Deletes an existing row and registers a rollback action to re-insert its original state if needed.
		public Task Delete<TRow>( IColumnTable<TRow> table, TRow row ) where TRow: IRow, new();
		/// Deletes an existing blob and registers a rollback action to re-upload its original state if needed.
		public Task Delete<TBlob>( IBlobContainer<TBlob> container, TBlob blob ) where TBlob: IBlob, new();
		/// Commits the transaction by executing all registered commit actions in parallel.
		public Task Commit();
		/// Adds a custom rollback action to the transaction.
		public Task Rollback();
	}
}
